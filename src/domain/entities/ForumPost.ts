import { DiscordMessage, IDiscordAttachment } from './DiscordMessage';
import { ForumTag } from './ForumTag';
import { EmojiUtils } from '../../infrastructure/discord/EmojiUtils';

export interface IForumPost {
    title: string;
    content: string;
    authorId: string;
    authorName: string;
    authorNickname: string;
    originalMessageId: string;
    originalChannelId: string;
    createdAt: Date;
    attachments: IDiscordAttachment[];
    availableTags?: ForumTag[];
}

export class ForumPost implements IForumPost {
    constructor(
        public readonly title: string,
        public readonly content: string,
        public readonly authorId: string,
        public readonly authorName: string,
        public readonly authorNickname: string,
        public readonly originalMessageId: string,
        public readonly originalChannelId: string,
        public readonly createdAt: Date,
        public readonly attachments: IDiscordAttachment[],
        public readonly availableTags?: ForumTag[]
    ) { }

    public static createFromMessage(message: DiscordMessage, maxTitleLength: number, availableTags?: ForumTag[]): ForumPost {
        const title = ForumPost.generateTitle(message, maxTitleLength);
        const content = ForumPost.generateContent(message, availableTags);

        return new ForumPost(
            title,
            content,
            message.authorId,
            message.authorName,
            message.authorNickname,
            message.id,
            message.channelId,
            new Date(),
            message.getAllAttachments(),
            availableTags
        );
    }

    private static generateTitle(message: DiscordMessage, maxTitleLength: number): string {
        const contentPreview = message.getContentPreview(50);
        // „Çµ„Éº„Éê„Éº„Éã„ÉÉ„ÇØ„Éç„Éº„É†„Çí‰ΩøÁî®
        const baseTitle = `${message.authorNickname} - [${contentPreview}]`;

        if (baseTitle.length <= maxTitleLength) {
            return baseTitle;
        }

        // „Çø„Ç§„Éà„É´„ÅåÈï∑„Åô„Åé„ÇãÂ†¥Âêà„ÅØÂàá„ÇäË©∞„ÇÅ„Çã
        const authorPart = `${message.authorNickname} - [`;
        const closeBracket = ']';
        const availableLength = maxTitleLength - authorPart.length - closeBracket.length - 3; // "..." „ÅÆÂàÜ

        if (availableLength <= 0) {
            // ‰ΩúËÄÖÂêç„Å†„Åë„Åß„ÇÇÈï∑„Åô„Åé„ÇãÂ†¥Âêà
            return `${message.authorNickname.substring(0, maxTitleLength - 6)}... - []`;
        }

        const truncatedContent = contentPreview.substring(0, availableLength) + '...';
        return `${authorPart}${truncatedContent}${closeBracket}`;
    }

    private static generateContent(message: DiscordMessage, availableTags?: ForumTag[]): string {
        const lines = [
            '**ÂÖÉ„ÅÆÊäïÁ®ø:**',
            message.content,
            '',
            `**ÊäïÁ®øËÄÖ:** <@${message.authorId}>`,
            `**ÂÖÉ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏:** ${message.getMessageUrl()}`,
            `**ÊäïÁ®øÊôÇÂàª:** ${message.timestamp.toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}`
        ];

        // ÁîªÂÉèÊ∑ª‰ªò„Éï„Ç°„Ç§„É´„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åù„ÅÆÊó®„ÇíËøΩÂä†
        if (message.hasAttachments()) {
            const attachmentCount = message.getAllAttachments().length;
            lines.push(`**Ê∑ª‰ªò„Éï„Ç°„Ç§„É´:** ${attachmentCount}ÂÄã`);
        }

        // Âà©Áî®ÂèØËÉΩ„Å™„Çø„Ç∞„Å®„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆÂØæÂøúÈñ¢‰øÇ„ÇíË°®Á§∫
        if (availableTags && availableTags.length > 0) {
            const tagsWithEmoji = availableTags.filter(tag => tag.hasEmoji());
            if (tagsWithEmoji.length > 0) {
                lines.push('');
                lines.push('**üè∑Ô∏è Âà©Áî®ÂèØËÉΩ„Å™„Çø„Ç∞:**');
                lines.push('‰∏ã„ÅÆ„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÊäº„Åó„Å¶„Çø„Ç∞„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ');
                lines.push('');

                tagsWithEmoji.forEach(tag => {
                    const emojiDisplay = EmojiUtils.formatTagEmojiForDisplay(tag);
                    lines.push(`${emojiDisplay} Ôºö **${tag.name}**`);
                });
            }
        }

        return lines.join('\n');
    }

    /**
     * Ê∑ª‰ªò„Éï„Ç°„Ç§„É´„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
     */
    public hasAttachments(): boolean {
        return this.attachments.length > 0;
    }
}
